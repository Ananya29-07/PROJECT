{"ast":null,"code":"// import React, { useCallback, useState } from 'react';\n// import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n// import Users from './users/pages/Users';\n// import NewPlace from './places/pages/NewPlace';\n// import UserPlaces from './places/pages/UserPlaces';\n// import MainNavigation from './shared/components/Navigation/MainNavigation';\n// import UpdatePlace from './places/pages/UpdatePlace';\n// import Auth from './users/pages/Auth';\n// import { AuthContext } from './shared/context/auth-context';\n\n// const App = () => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const login = useCallback(() => {\n//     setIsLoggedIn(true);\n//   }, []);\n\n//   const logout = useCallback(() => {\n//     setIsLoggedIn(false);\n//   }, []);\n\n//   let routes;\n\n//   if(isLoggedIn) {\n//     routes = (\n//       <Switch>\n//          <Route path=\"/\" exact>\n//                <Users/>\n//               </Route>\n//               <Route path=\"/:userId/places\" exact>\n//                <UserPlaces />\n//               </Route>\n//               <Route path=\"/places/new\" exact>\n//                <NewPlace/>\n//               </Route>\n//               <Route path=\"/places/:placeId\" exact>\n//                <UpdatePlace/>\n//               </Route>\n//               <Redirect to=\"/\"></Redirect>\n//       </Switch>\n//     );\n//   } else {\n//     routes = (\n//       <Switch>\n//          <Route path=\"/\" exact>\n//                <Users/>\n//               </Route>\n//               <Route path=\"/:userId/places\" exact>\n//                <UserPlaces />\n//               </Route>\n//               <Route path=\"/auth\" exact>\n//                <Auth />\n//               </Route>\n//               <Redirect to=\"/auth\"></Redirect>\n//       </Switch>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={{\n//       isLoggedIn: isLoggedIn,\n//       login: login,\n//       logout: logout\n//     }}>\n//       <Router>\n//         <MainNavigation />\n//           <main>\n//             {routes}\n//           </main>\n//       </Router>\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/91981/Desktop/Eight Sem/MERN/PROJECT/src/App.js"],"sourcesContent":["// import React, { useCallback, useState } from 'react';\n// import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n// import Users from './users/pages/Users';\n// import NewPlace from './places/pages/NewPlace';\n// import UserPlaces from './places/pages/UserPlaces';\n// import MainNavigation from './shared/components/Navigation/MainNavigation';\n// import UpdatePlace from './places/pages/UpdatePlace';\n// import Auth from './users/pages/Auth';\n// import { AuthContext } from './shared/context/auth-context';\n\n// const App = () => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const login = useCallback(() => {\n//     setIsLoggedIn(true);\n//   }, []);\n\n//   const logout = useCallback(() => {\n//     setIsLoggedIn(false);\n//   }, []);\n\n//   let routes;\n\n//   if(isLoggedIn) {\n//     routes = (\n//       <Switch>\n//          <Route path=\"/\" exact>\n//                <Users/>\n//               </Route>\n//               <Route path=\"/:userId/places\" exact>\n//                <UserPlaces />\n//               </Route>\n//               <Route path=\"/places/new\" exact>\n//                <NewPlace/>\n//               </Route>\n//               <Route path=\"/places/:placeId\" exact>\n//                <UpdatePlace/>\n//               </Route>\n//               <Redirect to=\"/\"></Redirect>\n//       </Switch>\n//     );\n//   } else {\n//     routes = (\n//       <Switch>\n//          <Route path=\"/\" exact>\n//                <Users/>\n//               </Route>\n//               <Route path=\"/:userId/places\" exact>\n//                <UserPlaces />\n//               </Route>\n//               <Route path=\"/auth\" exact>\n//                <Auth />\n//               </Route>\n//               <Redirect to=\"/auth\"></Redirect>\n//       </Switch>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={{\n//       isLoggedIn: isLoggedIn,\n//       login: login,\n//       logout: logout\n//     }}>\n//       <Router>\n//         <MainNavigation />\n//           <main>\n//             {routes}\n//           </main>\n//       </Router>\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}